{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// anime_frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [animeList, setAnimeList] = useState([]);\n\n  // If using Docker Compose, use \"http://anime_backend:8000\" as the base\n  // If running locally, use \"http://localhost:8000\"\n  const backendURL = \"http://anime_backend:8000/anime-list\";\n  useEffect(() => {\n    axios.get(backendURL).then(response => {\n      // The \"data\" object contains our array of anime.\n      setAnimeList(response.data.anime);\n    }).catch(error => {\n      console.error(\"Error fetching anime list:\", error);\n    });\n  }, [backendURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Anime List (GET Request Example)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: animeList.map(anime => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: anime.title\n      }, anime.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dbx1Bp5A6f85z1LNVM6daS4gn9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","animeList","setAnimeList","backendURL","get","then","response","data","anime","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","id","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// anime_frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [animeList, setAnimeList] = useState([]);\n\n  // If using Docker Compose, use \"http://anime_backend:8000\" as the base\n  // If running locally, use \"http://localhost:8000\"\n  const backendURL = \"http://anime_backend:8000/anime-list\";\n\n  useEffect(() => {\n    axios.get(backendURL)\n      .then((response) => {\n        // The \"data\" object contains our array of anime.\n        setAnimeList(response.data.anime);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching anime list:\", error);\n      });\n  }, [backendURL]);\n\n  return (\n    <div>\n      <h1>Anime List (GET Request Example)</h1>\n      <ul>\n        {animeList.map((anime) => (\n          <li key={anime.id}>{anime.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA;EACA,MAAMS,UAAU,GAAG,sCAAsC;EAEzDR,SAAS,CAAC,MAAM;IACdC,KAAK,CAACQ,GAAG,CAACD,UAAU,CAAC,CAClBE,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACAJ,YAAY,CAACI,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC;IACnC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;EAEhB,oBACEL,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzClB,OAAA;MAAAc,QAAA,EACGX,SAAS,CAACgB,GAAG,CAAET,KAAK,iBACnBV,OAAA;QAAAc,QAAA,EAAoBJ,KAAK,CAACU;MAAK,GAAtBV,KAAK,CAACW,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAChB,EAAA,CA5BQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}